// main.go
package main

import (
	"crypto/ecdsa"
	"crypto/tls"
	"fmt"
	"os"
	"time"

	// –ö–æ–Ω—Å–µ–Ω—Å—É—Å
	"blockchain/consensus/bft"
	"blockchain/consensus/manager"
	"blockchain/consensus/pos"

	// –°–µ—Ç—å
	"blockchain/network/gossip"
	"blockchain/network/peer"

	// –•—Ä–∞–Ω–∏–ª–∏—â–µ
	"blockchain/storage/blockchain"
	"blockchain/storage/txpool"

	// –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è
	"blockchain/crypto/signature"

	// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
	"blockchain/security/audit"
	"blockchain/security/double_spend"
	"blockchain/security/fiftyone"
	"blockchain/security/sybil"

	// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (API)
	"blockchain/integration/api"

	// –ì–æ–≤–µ—Ä–Ω–∞–Ω—Å
	"blockchain/governance/upgrade"
)

func runNode(
	txPool *txpool.TransactionPool,
	chain *blockchain.Blockchain,
	validator *pos.Validator,
	validatorPool pos.ValidatorPool, // ‚Üê –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
	peerAddresses []string,
	index int,
	validators []*pos.Validator, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
) {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á
	certPath := fmt.Sprintf("certs/validator%d.crt", index+1)
	keyPath := fmt.Sprintf("certs/validator%d.key", index+1)

	cert, err := tls.LoadX509KeyPair(certPath, keyPath)
	if err != nil {
		panic(fmt.Sprintf("‚ùå Failed to load cert for validator %d: %v", index+1, err))
	}

	ecdsaPrivateKey, ok := cert.PrivateKey.(*ecdsa.PrivateKey)
	if !ok {
		panic("‚ùå Private key is not ECDSA")
	}

	// –°–æ–∑–¥–∞—ë–º signer –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
	signer := signature.NewSignerFromKey(ecdsaPrivateKey)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
	signature.RegisterPublicKey(validator.Address, &ecdsaPrivateKey.PublicKey)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
	switcher := manager.NewConsensusSwitcher(manager.ConsensusBFT)
	switcher.StartConsensus(
		txPool,
		chain,
		validators, // ‚úÖ –í—Å–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
		validatorPool,
		signer,
		peerAddresses,
	)
}

func main() {
	fmt.Println("üöÄ Starting Blockchain Node...")

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ============
	chain := blockchain.NewBlockchain()
	if chain == nil {
		panic("chain is nil")
	}
	defer chain.Close()

	txPool := txpool.NewTransactionPool()

	// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
	gossip.SeenTransactionsSet.StartCleanup(5 * time.Minute)
	// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	bft.SeenMessagesSet.StartCleanup(5 * time.Minute)

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ ============
	peerAddresses := []string{
		"localhost:26656", // validator1
		"localhost:26657", // validator2
		"localhost:26658", // validator3
		"localhost:26659", // validator4
		"localhost:26660", // validator5
	}

	validators := []*pos.Validator{
		pos.NewValidatorWithAddress("validator1", peerAddresses[0], 2000),
		pos.NewValidatorWithAddress("validator2", peerAddresses[1], 1000),
		pos.NewValidatorWithAddress("validator3", peerAddresses[2], 1500),
		pos.NewValidatorWithAddress("validator4", peerAddresses[3], 1200),
		pos.NewValidatorWithAddress("validator5", peerAddresses[4], 800),
	}

	validatorPool := pos.NewValidatorPool(validators)

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è signer'–∞ ============
	// signer, err := signature.NewECDSASigner()
	// if err != nil {
	// 	panic("‚ùå Failed to create signer: " + err.Error())
	// }

	for i, validator := range validators {
		go func(i int, v *pos.Validator) {
			os.Setenv("NODE_ADDRESS", v.Address)
			time.Sleep(time.Duration(i) * 2 * time.Second)
			fmt.Printf("üè∑Ô∏è Starting validator node: %s\n", v.Address)
			runNode(txPool, chain, v, *validatorPool, peerAddresses, i, validators)
		}(i, validator)
	}
	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç 51% –∞—Ç–∞–∫ ============
	validatorsMap := map[string]int64{
		"validator1": 2000,
		"validator2": 1000,
		"validator3": 1500,
		"validator4": 1200,
		"validator5": 800,
	}

	guard := fiftyone.NewFiftyOnePercentGuard(validatorsMap)
	go guard.Monitor(30 * time.Second) // –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç Sybil ============
	sybilGuard := sybil.NewSybilGuard([]string{
		"validator1",
		"validator2",
		"validator3",
		"validator4",
		"validator5",
	})
	peer.SetSybilGuard(sybilGuard)

	// ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ==========
	auditor := audit.NewSecurityAuditor()

	// ============ –ó–∞–ø—É—Å–∫ REST API ============
	apiServer := api.NewAPIServer(chain, txPool, auditor)
	go func() {
		fmt.Println("üîå Starting REST API on :8081")
		if err := apiServer.Start(":8081"); err != nil {
			panic("‚ùå Failed to start API server: " + err.Error())
		}
	}()

	// ============ –ó–∞–ø—É—Å–∫ –∑–∞—â–∏—Ç—ã –æ—Ç –¥–≤–æ–π–Ω–æ–π —Ç—Ä–∞—Ç—ã ============
	double_spend.InitSecurity()

	// ========== –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –Ω–æ–¥—ã ==========
	auditor.RecordEvent(audit.SecurityEvent{
		Timestamp: time.Now(),
		Type:      "NodeStartup",
		Message:   "Blockchain node started successfully",
		NodeID:    "validator1",
		Severity:  "INFO",
	})

	// ========== –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—É–¥–∏—Ç –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö ==========
	double_spend.SetAuditor(auditor) // –ü–µ—Ä–µ–¥–∞–µ–º –∞—É–¥–∏—Ç –≤ –∑–∞—â–∏—Ç—É –æ—Ç –¥–≤–æ–π–Ω–æ–π —Ç—Ä–∞—Ç—ã
	fiftyone.SetAuditor(auditor)     // –ü–µ—Ä–µ–¥–∞–µ–º –∞—É–¥–∏—Ç –≤ –∑–∞—â–∏—Ç—É –æ—Ç 51% –∞—Ç–∞–∫
	sybil.SetAuditor(auditor)        // –ü–µ—Ä–µ–¥–∞–µ–º –∞—É–¥–∏—Ç –≤ –∑–∞—â–∏—Ç—É –æ—Ç Sybil

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–≤–µ—Ä–Ω–∞–Ω—Å–∞ ============
	upgradeMgr := upgrade.NewUpgradeManager("v1.0.0")
	upgradeMgr.ProposeUpgrade("v2.0.0", "Switch to BFT", time.Now().Add(24*time.Hour))
	if err := upgradeMgr.ApproveUpgrade(); err != nil {
		fmt.Println("‚ö†Ô∏è Approval failed:", err)
	}
	if err := upgradeMgr.ApplyUpgrade(); err != nil {
		fmt.Println("‚ö†Ô∏è Upgrade failed:", err)
	}

	// ============ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ ============
	// switcher := manager.NewConsensusSwitcher(manager.ConsensusBFT)

	// switcher.StartConsensus(
	// 	txPool,
	// 	chain,
	// 	validators,
	// 	*validatorPool,
	// 	signer,
	// 	peerAddresses,
	// )

	fmt.Println("‚úÖ Node started. Waiting for connections...")

	// ============ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã ============
	select {}
}
