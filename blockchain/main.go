// main.go
package main

import (
	"fmt"
	"time"

	// –ö–æ–Ω—Å–µ–Ω—Å—É—Å
	"blockchain/consensus/bft"
	"blockchain/consensus/manager"
	"blockchain/consensus/pos"
	"blockchain/network/peer"

	// –•—Ä–∞–Ω–∏–ª–∏—â–µ
	"blockchain/storage/blockchain"
	"blockchain/storage/txpool"

	// –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è
	"blockchain/crypto/signature"

	// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
	"blockchain/security/double_spend"
	"blockchain/security/fiftyone"
	"blockchain/security/sybil"

	// –°–µ—Ç—å

	// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (API)
	"blockchain/integration/api"

	// –ì–æ–≤–µ—Ä–Ω–∞–Ω—Å
	"blockchain/governance/upgrade"
)

func main() {
	fmt.Println("üöÄ Starting Minimal Blockchain Node...")

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ============
	chain := blockchain.NewBlockchain()
	txPool := txpool.NewTransactionPool()

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ ============
	peerAddresses := []string{
		"localhost:26656", // validator1
		"localhost:26657", // validator2
	}
	validators := []*pos.Validator{
		pos.NewValidatorWithAddress("validator1", peerAddresses[0], 2000),
		pos.NewValidatorWithAddress("validator2", peerAddresses[1], 1000),
	}
	validatorPool := pos.NewValidatorPool(validators)

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è signer'–∞ ============
	signer, err := signature.NewECDSASigner()
	if err != nil {
		panic("‚ùå Failed to create signer: " + err.Error())
	}
	pubKey, err := signature.ParsePublicKey(signer.PublicKey())
	if err != nil {
		panic("‚ùå Failed to parse public key: " + err.Error())
	}
	signature.RegisterPublicKey(validators[0].Address, pubKey)
	signature.RegisterPublicKey(validators[1].Address, pubKey)

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BFT-–Ω–æ–¥ ============
	bftNode := bft.NewBFTNode(
		"validator1",
		validators[0],
		*validatorPool,
		txPool,
		chain,
		signer,
		peerAddresses[0],
		peerAddresses,
	)
	bftNode2 := bft.NewBFTNode(
		"validator2",
		validators[1],
		*validatorPool,
		txPool,
		chain,
		signer,
		peerAddresses[1],
		peerAddresses,
	)

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConsensusSwitcher ============
	switcher := manager.NewConsensusSwitcher(manager.ConsensusBFT)

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç 51% –∞—Ç–∞–∫ ============
	validatorsMap := map[string]int64{
		"validator1": 2000,
		"validator2": 1000,
	}
	guard := fiftyone.NewFiftyOnePercentGuard(validatorsMap)
	go guard.Monitor(30 * time.Second) // –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç Sybil ============
	sybilGuard := sybil.NewSybilGuard([]string{"validator1", "validator2"})
	peer.SetSybilGuard(sybilGuard)

	// ============ –ó–∞–ø—É—Å–∫ P2P —Å–µ—Ç–∏ ============
	go bft.StartTCPServer(bftNode)
	go bft.StartTCPServer(bftNode2)

	// ============ –ó–∞–ø—É—Å–∫ REST API ============
	apiServer := api.NewAPIServer(chain, txPool)
	go func() {
		fmt.Println("üîå Starting REST API on :8081")
		if err := apiServer.Start(":8081"); err != nil {
			panic("‚ùå Failed to start API server: " + err.Error())
		}
	}()

	// ============ –ó–∞–ø—É—Å–∫ –∑–∞—â–∏—Ç—ã –æ—Ç –¥–≤–æ–π–Ω–æ–π —Ç—Ä–∞—Ç—ã ============
	double_spend.InitSecurity()

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–≤–µ—Ä–Ω–∞–Ω—Å–∞ ============
	upgradeMgr := upgrade.NewUpgradeManager("v1.0.0")
	upgradeMgr.ProposeUpgrade("v2.0.0", "Switch to BFT", time.Now().Add(24*time.Hour))
	if err := upgradeMgr.ApproveUpgrade(); err != nil {
		fmt.Println("‚ö†Ô∏è Approval failed:", err)
	}
	if err := upgradeMgr.ApplyUpgrade(); err != nil {
		fmt.Println("‚ö†Ô∏è Upgrade failed:", err)
	}

	// ============ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ ============
	go func() {
		switcher.Run()
	}()

	// ============ –ó–∞–ø—É—Å–∫ BFT-—É–∑–ª–æ–≤ ============
	go func() {
		time.Sleep(2 * time.Second)
		bftNode.Start()
	}()
	go func() {
		time.Sleep(3 * time.Second)
		bftNode2.Start()
	}()

	fmt.Println("‚úÖ Node started. Waiting for connections...")

	// ============ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã ============
	select {}
}
