package txpool

import (
	"fmt"
	"sync"
	"time"

	"blockchain/security/double_spend"
)

type TransactionPool struct {
	Transactions map[string]*Transaction
	mu           sync.Mutex
}

func NewTransactionPool() *TransactionPool {
	return &TransactionPool{
		Transactions: make(map[string]*Transaction),
	}
}

var doubleSpendGuard *double_spend.DoubleSpendGuard

func init() {
	doubleSpendGuard = double_spend.NewDoubleSpendGuard()
	doubleSpendGuard.StartCleanup(5 * time.Minute)
}

func (p *TransactionPool) AddTransaction(tx *Transaction) {
	p.mu.Lock()
	defer p.mu.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –ø—É–ª–µ
	if _, exists := p.Transactions[tx.ID]; exists {
		fmt.Printf("‚ùå Transaction %s already exists in pool\n", tx.ID)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–≤–æ–π–Ω–æ–π —Ç—Ä–∞—Ç–æ–π
	if !doubleSpendGuard.CheckAndMark(tx.ID) {
		fmt.Printf("‚ùå Double spend detected for transaction %s\n", tx.ID)
		return
	}

	p.Transactions[tx.ID] = tx
	fmt.Printf("üì• Transaction %s added to pool\n", tx.ID)
}
func (p *TransactionPool) GetTransactions(limit int) []*Transaction {
	p.mu.Lock()
	defer p.mu.Unlock()

	var list []*Transaction
	seen := make(map[string]bool)

	for _, tx := range p.Transactions {
		if seen[tx.ID] {
			continue
		}

		list = append(list, tx)
		seen[tx.ID] = true

		if len(list) >= limit {
			break
		}
	}

	return list
}

func (p *TransactionPool) RemoveTransaction(id string) {
	p.mu.Lock()
	defer p.mu.Unlock()
	delete(p.Transactions, id)
}

func (p *TransactionPool) Flush() {
	p.mu.Lock()
	defer p.mu.Unlock()
	p.Transactions = make(map[string]*Transaction)
}

// HasTransaction –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º ID –≤ –ø—É–ª–µ
func (p *TransactionPool) HasTransaction(txID string) bool {
	p.mu.Lock()
	defer p.mu.Unlock()
	_, exists := p.Transactions[txID]
	return exists
}
