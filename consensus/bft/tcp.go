package bft

import (
	"blockchain/network/gossip"
	"blockchain/network/p2p"
	"crypto/tls"
	"encoding/json"
	"fmt"
	"net"
	"time"
)

// Message ‚Äî —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É BFT-–Ω–æ–¥–∞–º–∏
type TcpMessage struct {
	Type      gossip.MessageType
	From      string
	Data      []byte
	Timestamp int64
}

// StartTCPServer ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç TCP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è BFT-–Ω–æ–¥
func StartTCPServer(bftNode *BFTNode) {
	config := p2p.GenerateTLSConfig()
	listener, err := tls.Listen("tcp", bftNode.Address, config)
	if err != nil {
		fmt.Printf("‚ùå Failed to start TCP server on %s: %v\n", bftNode.Address, err)
		return
	}
	defer listener.Close()
	fmt.Printf("üì° BFT Node listening on %s\n", bftNode.Address)

	for {
		conn, err := listener.Accept()
		if err != nil {
			fmt.Printf("‚ùå Failed to accept connection: %v\n", err)
			continue
		}
		go handleConnection(conn, bftNode)
	}
}

// handleConnection ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func handleConnection(conn net.Conn, bftNode *BFTNode) {
	defer conn.Close()

	// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ TLS
	tlsConn, ok := conn.(*tls.Conn)
	if !ok {
		fmt.Println("‚ùå Connection is not a TLS connection")
		return
	}

	// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ –ø—Ä–æ—à–ª–æ
	if err := tlsConn.Handshake(); err != nil {
		fmt.Printf("‚ùå TLS handshake failed: %v\n", err)
		return
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	decoder := json.NewDecoder(tlsConn)
	var msg gossip.SignedConsensusMessage
	if err := decoder.Decode(&msg); err != nil {
		fmt.Printf("‚ùå Failed to decode message: %v\n", err)
		return
	}

	// –°–æ–∑–¥–∞—ë–º —Ö–µ–Ω–¥–ª–µ—Ä
	handler := NewBFTMessageHandler(bftNode)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	fmt.Printf("üì• Received message from %s: %s\n", msg.From, msg.Type)
	handler.ProcessMessage(&msg)
}

// BroadcastMessage ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–µ–µ—Ä–∞–º
func BroadcastMessage(bftNode *BFTNode, msgType gossip.MessageType, data []byte) {
	msg := TcpMessage{
		Type:      msgType,
		From:      bftNode.Address,
		Data:      data,
		Timestamp: time.Now().UnixNano(),
	}
	msgBytes, _ := json.Marshal(msg)

	for _, peer := range bftNode.Peers {
		go func(addr string) {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º TLS –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ TCP
			conn, err := tls.Dial("tcp", addr, p2p.GenerateTLSConfig())
			if err != nil {
				fmt.Printf("‚ùå Can't connect to peer %s: %v\n", addr, err)
				return
			}
			defer conn.Close()

			_, err = conn.Write(msgBytes)
			if err != nil {
				fmt.Printf("‚ùå Failed to send message to %s: %v\n", addr, err)
			}
		}(peer)
	}
}
