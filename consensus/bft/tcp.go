package bft

import (
	"blockchain/storage/blockchain"
	"encoding/json"
	"fmt"
	"net"
	"time"
)

// Message ‚Äî —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É BFT-–Ω–æ–¥–∞–º–∏
type TcpMessage struct {
	Type      ConsensusState
	From      string
	Data      []byte
	Timestamp int64
}

// StartTCPServer ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç TCP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è BFT-–Ω–æ–¥
func StartTCPServer(bftNode *BFTNode) {
	listener, err := net.Listen("tcp", bftNode.Address)
	if err != nil {
		fmt.Printf("‚ùå Failed to start TCP server on %s: %v\n", bftNode.Address, err)
		return
	}
	defer listener.Close()

	fmt.Printf("üì° BFT Node listening on %s\n", bftNode.Address)

	for {
		conn, err := listener.Accept()
		if err != nil {
			fmt.Printf("‚ùå Failed to accept connection: %v\n", err)
			continue
		}
		go handleConnection(conn, bftNode)
	}
}

// handleConnection ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func handleConnection(conn net.Conn, bftNode *BFTNode) {
	defer conn.Close()

	decoder := json.NewDecoder(conn)
	var msg TcpMessage

	if err := decoder.Decode(&msg); err != nil {
		fmt.Printf("‚ùå Failed to decode message: %v\n", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ (–ø—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Äî –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
	round := bftNode.CurrentRound

	switch msg.Type {
	case StatePropose:
		block := &blockchain.Block{}
		if err := block.Deserialize(msg.Data); err != nil {
			fmt.Printf("‚ùå Failed to deserialize block: %v\n", err)
			return
		}
		round.ProposedBlock = msg.Data
		fmt.Printf("üì¨ Received proposal from %s\n", msg.From)

	case StatePrevote:
		round.Prevotes[msg.From] = msg.Data
		fmt.Printf("üì¨ Received prevote from %s\n", msg.From)

	case StatePrecommit:
		round.Precommits[msg.From] = msg.Data
		fmt.Printf("üì¨ Received precommit from %s\n", msg.From)

	default:
		fmt.Printf("‚ö†Ô∏è Unknown message type: %s\n", msg.Type)
	}
}

// BroadcastMessage ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–µ–µ—Ä–∞–º
func BroadcastMessage(bftNode *BFTNode, msgType ConsensusState, data []byte) {
	msg := TcpMessage{
		Type:      msgType,
		From:      bftNode.Address,
		Data:      data,
		Timestamp: time.Now().UnixNano(),
	}

	msgBytes, _ := json.Marshal(msg)

	for _, peer := range bftNode.Peers {
		go func(addr string) {
			conn, err := net.Dial("tcp", addr)
			if err != nil {
				fmt.Printf("‚ùå Can't connect to peer %s: %v\n", addr, err)
				return
			}
			defer conn.Close()

			_, err = conn.Write(msgBytes)
			if err != nil {
				fmt.Printf("‚ùå Failed to send message to %s: %v\n", addr, err)
			}
		}(peer)
	}
}
