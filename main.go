// main.go
package main

import (
	"fmt"
	"time"

	// –£—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
	"blockchain/consensus/bft"
	"blockchain/consensus/manager"
	"blockchain/consensus/pos"

	// –°–µ—Ç—å

	// –•—Ä–∞–Ω–∏–ª–∏—â–µ
	"blockchain/storage/blockchain"
	"blockchain/storage/sharding"
	"blockchain/storage/txpool"

	// –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è
	"blockchain/crypto/signature"

	// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
	"blockchain/security/double_spend"

	// –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å
	"blockchain/scalability/parallel"

	// API
	"blockchain/integration/api"
	"blockchain/integration/bank"

	// –ì–æ–≤–µ—Ä–Ω–∞–Ω—Å

	"blockchain/governance/upgrade"
)

func main() {
	fmt.Println("üöÄ Starting Blockchain Simulation System...")

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ============
	chain := blockchain.NewBlockchain()
	txPool := txpool.NewTransactionPool()

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ============
	tx1 := txpool.NewTransaction("A", "B", 10)
	txPool.AddTransaction(tx1)

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ ============
	validators := []*pos.Validator{
		pos.NewValidator("validator1", 2000),
		pos.NewValidator("validator2", 1000),
	}
	validatorPool := pos.NewValidatorPool(validators)

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è signer'–∞ ============
	signer, err := signature.NewECDSASigner()
	if err != nil {
		panic("‚ùå Failed to create signer: " + err.Error())
	}

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BFT-–Ω–æ–¥—ã ============
	bftNode := bft.NewBFTNode(
		"validator1",
		validators[0],
		*validatorPool,
		txPool,
		chain,
		signer,
	)

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConsensusSwitcher ============
	switcher := manager.NewConsensusSwitcher(manager.ConsensusBFT)

	// ============ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ —á–µ—Ä–µ–∑ ConsensusSwitcher ============
	go func() {
		ticker := time.NewTicker(10 * time.Second)
		for {
			<-ticker.C
			switcher.StartConsensus()
		}
	}()

	// ============ –ó–∞–ø—É—Å–∫ P2P —Å–µ—Ç–∏ ============
	go bft.StartNetwork()

	// ============ –ó–∞–ø—É—Å–∫ REST API ============
	apiServer := api.NewAPIServer(chain, txPool)
	go func() {
		fmt.Println("üîå Starting REST API on :8081")
		if err := apiServer.Start(":8081"); err != nil {
			panic("‚ùå Failed to start API server: " + err.Error())
		}
	}()

	// ============ –ó–∞–ø—É—Å–∫ –∑–∞—â–∏—Ç—ã –æ—Ç –¥–≤–æ–π–Ω—ã—Ö —Ç—Ä–∞—Ç ============
	double_spend.InitSecurity()

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–≤–µ—Ä–Ω–∞–Ω—Å–∞ ============
	upgradeMgr := upgrade.NewUpgradeManager("v1.0.0")
	upgradeMgr.ProposeUpgrade("v2.0.0", "Switch to BFT", time.Now().Add(24*time.Hour))
	if err := upgradeMgr.ApproveUpgrade(); err != nil {
		fmt.Println("‚ö†Ô∏è Approval failed:", err)
	}
	if err := upgradeMgr.ApplyUpgrade(); err != nil {
		fmt.Println("‚ö†Ô∏è Upgrade failed:", err)
	}

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞—Ä–¥–æ–≤ ============
	shardMgr := sharding.NewShardManager()
	shardMgr.CreateShard("0")

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏ ============
	executor := parallel.NewParallelExecutor(4, 10)
	if err := executor.ExecuteTransactions(txPool.GetTransactions(100), chain); err != nil {
		fmt.Println("‚ö†Ô∏è Parallel execution failed:", err)
	}

	// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —à–ª—é–∑–∞ ============
	bankGateway := bank.NewBankGateway("api-key", "https://bank-api.com")
	_, _ = bankGateway.GetBalance("user123")

	// ============ –ó–∞–ø—É—Å–∫ BFT-—É–∑–ª–∞ ============
	go bftNode.Start()

	fmt.Println("‚úÖ Blockchain system started. Waiting for connections...")

	// ============ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ ============
	select {}
}
